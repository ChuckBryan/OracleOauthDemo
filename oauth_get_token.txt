CREATE OR REPLACE PROCEDURE oauth_get_token AS
  -- Variables for OAuth token request
  req_token       UTL_HTTP.REQ;
  resp_token      UTL_HTTP.RESP;
  token_url       VARCHAR2(256) := 'http://openiddict-api:80/connect/token';
  client_id       VARCHAR2(100) := 'test-client';
  client_secret   VARCHAR2(100) := 'test-secret';
  scope           VARCHAR2(100) := 'api';
  grant_type      VARCHAR2(100) := 'client_credentials';
  token_request   VARCHAR2(500);
  token_response  VARCHAR2(4000);
  value           VARCHAR2(256);
  
  -- Variables for JSON parsing
  access_token    VARCHAR2(4000);
  
  -- Variables for error handling
  http_error_msg  VARCHAR2(512);
BEGIN
  -- Set SSL wallet for secure connections
  -- Note: Depending on your Oracle configuration, you may need to uncomment and configure this
  -- UTL_HTTP.SET_WALLET('file:/path/to/your/wallet', 'wallet_password');
  
  -- Disable certificate validation for development purposes
  -- WARNING: In production, you should validate certificates!
  UTL_HTTP.SET_RESPONSE_ERROR_CHECK(FALSE);
  
  -- Step 1: Get OAuth token from your server
  BEGIN
    -- Set up token request
    token_request := 'grant_type=' || grant_type || 
                   '&client_id=' || client_id || 
                   '&client_secret=' || client_secret || 
                   '&scope=' || scope;
    
    -- Begin request for token
    DBMS_OUTPUT.PUT_LINE('Initiating request to token endpoint: ' || token_url);
    req_token := UTL_HTTP.BEGIN_REQUEST(token_url, 'POST', 'HTTP/1.1');
    UTL_HTTP.SET_HEADER(req_token, 'Content-Type', 'application/x-www-form-urlencoded');
    UTL_HTTP.SET_HEADER(req_token, 'Content-Length', LENGTH(token_request));
    
    -- Write request body
    DBMS_OUTPUT.PUT_LINE('Sending token request: ' || token_request);
    UTL_HTTP.WRITE_TEXT(req_token, token_request);
    
    -- Get response
    DBMS_OUTPUT.PUT_LINE('Getting response...');
    resp_token := UTL_HTTP.GET_RESPONSE(req_token);
    
    -- Display response status
    DBMS_OUTPUT.PUT_LINE('Response status: ' || resp_token.status_code);
    
    -- Check response status
    IF resp_token.status_code != 200 THEN
      DBMS_OUTPUT.PUT_LINE('OAuth server returned status: ' || resp_token.status_code);
      http_error_msg := 'Failed to get token. Status: ' || resp_token.status_code;
      
      -- Read and display error response
      BEGIN
        LOOP
          UTL_HTTP.READ_LINE(resp_token, value, TRUE);
          DBMS_OUTPUT.PUT_LINE('Response body: ' || value);
        END LOOP;
      EXCEPTION
        WHEN UTL_HTTP.END_OF_BODY THEN
          NULL;
      END;
      
      UTL_HTTP.END_RESPONSE(resp_token);
      RAISE_APPLICATION_ERROR(-20001, http_error_msg);
    END IF;
    
    -- Read the token response
    token_response := '';
    BEGIN
      LOOP
        UTL_HTTP.READ_LINE(resp_token, value, TRUE);
        token_response := token_response || value;
      END LOOP;
    EXCEPTION
      WHEN UTL_HTTP.END_OF_BODY THEN
        NULL;
    END;
    
    UTL_HTTP.END_RESPONSE(resp_token);
    
    -- Output the token response for debugging
    DBMS_OUTPUT.PUT_LINE('Token Response: ' || token_response);
    
    -- Extract access token from JSON response (simple version)
    BEGIN
      access_token := SUBSTR(
        token_response,
        INSTR(token_response, '"access_token":"') + 16,
        INSTR(
          SUBSTR(token_response, INSTR(token_response, '"access_token":"') + 16),
          '"'
        ) - 1
      );
      
      DBMS_OUTPUT.PUT_LINE('Access Token: ' || access_token);
    EXCEPTION
      WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Error parsing access token from response: ' || SQLERRM);
        DBMS_OUTPUT.PUT_LINE('Raw response: ' || token_response);
    END;
    
  EXCEPTION
    WHEN OTHERS THEN
      -- Make sure to end any open responses
      IF UTL_HTTP.IS_RESPONSE_OPEN(resp_token) THEN
        UTL_HTTP.END_RESPONSE(resp_token);
      END IF;
      
      DBMS_OUTPUT.PUT_LINE('Error occurred: ' || SQLERRM);
      RAISE;
  END;
END oauth_get_token;
/