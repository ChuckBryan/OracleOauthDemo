For those of you who haven’t read the old post, here is some background information. If you ever want to do your ASP.NET Core development using both WSL (using the Remote - WSL extension) and Windows, you will soon realize that there are some inherent issues with the local development certs… Mainly that ASP.NET Core sets up one development certificate in Windows, and one in Linux. And neither environment trusts the other. Not to mention that Linux doesn’t even trust its own cert, making server to server communication hard in Linux.

Unfortunately, the tools provided by dotnet doesn’t quite seem to do the trick when trying to get mutual trust to work. I’m not sure why, but at least on my machine, any cert that is generated by dotnet has problems when it comes to being able to trust it in Linux. So because of this, there are a few hoops we need to jump through to get this to work…

Note: My guess is that Linux requires a CA to issue the cert to be able to trust it. However, the cert generated by .NET is not a properly issued cert with a CA as this has some inherent dangers… Dangers I will ignore on my development box, and try to mitigate by keeping my cert VERY safe

In the previous post, there were quite a few steps involved in getting it to work. However, it can be simplified a bit at least…and made to work…

Dev certs in Linux
When you install the .NET SDK, an ASP.NET developer certificate is generated and configured for use by ASP.NET. However, it doesn’t seem like that cert is being properly trusted by Linux, causing server to server communication to fail. Because of this, we need to generate our own self-signed cert. Luckily, this isn’t too hard with the help of Google…

The first step is to create an OpenSSL configuration file that looks like this

[req]
prompt                  = no
default_bits            = 2048
distinguished_name      = subject
req_extensions          = req_ext
x509_extensions         = x509_ext
[subject]
commonName              = localhost
[req_ext]
basicConstraints        = critical, CA:true
subjectAltName          = @alt_names
[x509_ext]
basicConstraints        = critical, CA:true
keyUsage                = critical, keyCertSign, cRLSign, digitalSignature,keyEncipherment
extendedKeyUsage        = critical, serverAuth
subjectAltName          = critical, @alt_names
1.3.6.1.4.1.311.84.1.1  = ASN1:UTF8String:ASP.NET Core HTTPS development certificate
[alt_names]
DNS.1                   = localhost
DNS.2                   = 127.0.0.1
Note: This config creates a certificate that is both a CA and an SSL cert. The reason for this is that Linux needs a CA cert to be able to trust it.

Once we have our OpenSSL configuration, we can go ahead and generate our certificate by running

> openssl req -x509 -nodes -days 365 -newkey rsa:2048 \
               -keyout localhost.key \
               -out localhost.crt \
               -config localhost.conf
This generates a key pair based on the configuration file we just created.

Just for the sake of it, we can verify that it currently isn’t trusted, by running

> openssl verify localhost.crt

CN = localhost
error 18 at 0 depth lookup: self signed certificate
error localhost1.crt: verification failed
To trust the cert, we need to copy it to /usr/local/share/ca-certificates, and add it to our trusted CA:s. Like this

> sudo cp localhost.crt /usr/local/share/ca-certificates
> sudo update-ca-certificates
After that, we should be able to verify that the cert is trusted by running openssl verify again

> openssl verify localhost.crt

localhost.crt: OK
The last step is to make sure that ASP.NET Core uses this certificate when SSL is turned on. This is easily done by running the dotnet dev-certs command. However, this command expects a PKCS12 certificate. So before we can do that, we need to convert our key pair into a PKCS12 cert using OpenSSL

openssl pkcs12 -export -out localhost.pfx -inkey localhost.key -in localhost.crt
Once we have out PFX-file, we can finally tell ASP.NET to use it by running

dotnet dev-certs https --clean --import ./localhost.pfx -p <PASSWORD>
Remember: Make sure it is a secure password! If anyone should get their hands on this cert, it could be used to launch a malicious attach against your machine. So keeping it safe is VERY important! And also make sure that the key pair is stored in a safe place.

Ok, that’s it from the Linux side…

Dev certs in Windows
When you install the .NET Core SDK on Windows, it creates a development HTTPS certificate for you automatically just like it does in Linux. All you have to do is run dotnet dev-certs https --trust to trust it and you are good to go! However, in this case we want to replace that cert with the cert we just created…

The first step in doing this, is to get hold of the PFX file we just generated. On my machine, I copy it to a user specific folder by running the following command in WSL

cp ./localhost.pfx /mnt/c/Users/<USERNAME>/.aspnet/https
Next, we need to tell ASP.NET to use it by running the following command in PowerShell

PS> dotnet dev-certs https --clean --import "${env:USERPROFILE}\.aspnet\https\localhost.pfx" -p <PASSWORD>
However, this installs the cert in the Personal directory. And since the cert has a CA (itself), it needs to be added to Trusted Root Certificate Authorities as well.

Once that is done, you should have the same cert in WSL and Windows. And both Windows and Linux should trust it!

Note: If you are using multiple WSL environments, you need to make sure that you copy the cert to the other environments as well. Making sure to both trust the cert, and add it as a dev-cert using dotnet dev-certs